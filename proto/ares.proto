syntax = "proto3";
package ares;

message Packet {
  oneof type {
    ChunkLoad chunkLoad = 1;
    ListCharactersResponse listCharactersResponse = 2;
    ConnectionSuccess connectionSuccess = 3;
    CreateCharacter createCharacter = 4;
    ListCharacters listCharacters = 5;
    SelectCharacter selectCharacter = 6;
    PlayerPosition playerPosition = 7;
    EntityMove entityMove = 8;
    LeaveGame leaveGame = 9;
    JoinGame joinGame = 10;
    JoinGameReady joinGameReady = 11;
    EntitySpawn entitySpawn = 12;
    EntityDespawn entityDespawn = 13;
    Error error = 14;
    EntityAction entityAction = 15;
  }
}

// ======================================== [SERVER -> CLIENT]
// Packets sent from the server to the client

// request to load chunk
message ChunkLoad {
  ChunkPosition position = 1;
}

// return the player's characters list
message ListCharactersResponse {
  repeated Character characters = 1;
  uint32 limit = 2;
}

// notify the client that the connection was successful
message ConnectionSuccess {
}

message EntityMove {
  string id = 1;
  Position position = 2;
}

message JoinGame {
}

message EntitySpawn {
  string id = 1;
  Position position = 2;
  EntityType type = 3;
}

message EntityDespawn {
  string id = 1;
}

message Error {
  ErrorCode code = 1;
}

// ======================================== [CLIENT -> SERVER]
// Packets sent from the client to the server

// request to create a new character, the server will respond with a ListCharactersResponse
message CreateCharacter {
  string name = 1;
}

// request to load characters list, the server will respond with a ListCharactersResponse
message ListCharacters {
}

// request to select a character, the server will start sending ChunkLoad packets
message SelectCharacter {
  string id = 1;
}

message JoinGameReady {}

// the client is going back to the main menu
message LeaveGame {}

// ======================================== [CLIENT <-> SERVER]
// Packets used by both client and server

// notify the other party that the player moved
// when the server receives it he stores the position
// when the client receives it he updates the position
message PlayerPosition {
  Position position = 1;
}

message EntityAction {
  string id = 1;
  Action action = 2;
}

// ========================================
// Types used by both client and server

message Position {
  float x = 1;
  float y = 2;
  float z = 3;
}

message ChunkPosition {
  sint32 x = 1;
  sint32 z = 2;
}

message Character {
  string id = 1;
  string name = 2;
  uint32 level = 3;
  uint32 head = 4;
  uint32 cape = 5;
}

enum EntityType {
  PLAYER = 0;
  CREATURE = 1;
  NPC = 2;
}

enum ErrorCode {
  CREATE_CHARACTER_NAME_TAKEN = 0;
  NO_BETA_ACCESS = 1;
}

enum Action {
  JUMP = 0;
  DANCE = 1;
}